2019.10.15:
    创建监督文档,和李静文互相监督学习,
    绕小区跑两圈，做减肥操.

2019.10.16:
    修复学生中心接口,
    提测跟进素材库相册，优化随机点名部分,
    下班回去做减肥操.

2019.10.17:
    修复异步素材库拍摄接口的Toast提示信息,
    买了一本书《Effective Java中文版》,
    对一个初创公司"小年糕"有好感，是做互联网拍摄的,
    踩坑:
    1.post两种传参方式之比较
    <1>
    @PostMapping("/v1/addPhotos")
    public RestResult<Object> addPhotos(Map<String,Object> addPhotosMap){}
    <2>
    @PostMapping("/v1/addPhotos")
    public RestResult<Object> addPhotos(@RequestBody AddPhotosDto addPhotosDto){}

    @Date
    public class AddPhotosDto{
        private String name;
        private String address;
        private String createTime;
    }
    结论:第二种方式会更安全一些。
    2.返回数组，集合，map时候，如果是空的，也不要返回null,就返回一个空的数组，集合就可以了。
    3.x.equals(y),x的位置是常量，y的位置是变量，这样的位置对比会更安全一些。

2019.10.18:
    1.Java检查型异常和非检查型异常,运行时异常和非运行时异常:
        (1)Java检查型异常(checked execption):编辑器要求你必须处置的错误,Java中不是RuntimeException派生的Exception都是检查型异常，函数声明的，必须try...catch...,或者throw Exception
        (2)Java非检查型异常(unchecked exception):编辑器不要求处置的错误,Java中RuntimeException派生的都是非检查型异常，可以不用throws,常见的有NullPointException,ClassCastException,
        IndexOutOfBoundsException(数组越界错误),VirtualMachineError(OutOfMemoryError(内存溢出),StackOverflowError(盏溢出),InternalError(Jvm内部错误),UnknowError(未知错误))
        (3)Java运行时异常:RuntimeException类及其子类异常,如空指针,数组越界等
        (4)Java非运行时异常:RuntimeExceptione类及其子类，如IOException,SQLException等
    2.代码中开异步线程的应用场景
    3.JSON字符串更适合存到mongodb里面
    4.下午4点-6点,参加部门1028版本的review code会议
    5.学习redisTemplate.executePipelined,管道方法

2019.10.20:
    和实验室第一届钟铭军学长联系，他也在好未来，告诉我了一些工作经验，和一些跳槽时候的笔记，感觉帮助很大。
    晚上做饭，发现我做饭还挺好吃的[得意][得意]😤

2019.10.21:
    1.修复1028版本，课后报告拉取不到数据问题，是feign里面获取别的微服务接口的响应时间过长，而系统的默认熔断时间为1s，因此为单个feign接口配置响应时间,最长设置为3s,后获取数据正常。
    2.接手新的项目rt-service-livedate
    3.学习CountDownLatch这个类,这个类使一个线程等待其他线程各自执行完毕后再执行，是通过一个执行器来实现的,计数器的初始值是线程的数量。每当一个线程执行完毕后,计数器的值就是-1，当计数器
      的值为0时,表示所有的线程都执行完毕了，然后再闭锁上等待的线程就可以恢复工作了。
    4.参加集团组织的第四期思享汇。晚上参加了公司组织的会议，老师讲的很棒，尤其是对时间的片段化，细分的很详细，尤其是对片段化的时间空前的优越感，讲的很棒。

2019.10.22:
    1.修改1028版本数据库素材库表中的img_isAll字段为img_is_all字段,符合公司命名标准。
    2.参加1204版本的需求二审会议的课中环节等。
    3.添加学长笔记到git目录中。
    4.开始步入系统学习shell脚本中。

2019.10.23:
    1.整理postman工具，对接口打上标签，便于下次是调接口使用。
    2.重新整理点名互动的逻辑,端上发起互动,然后通知服务端,服务端再通知pad端，来回进行指令的的穿梭
    3.重新整理springboot整合MongoDB的细节:
    <1>.@Document(collection = "表名")
        @CompoundIndexes({  //索引
            @CompoundIndex(name = "cc_oio_index",def="{'cc':1,'oio':1}")
        })
    <2>.Query query = new Query();
        query.addCriteria(Criteria.where("aa").is(aa)).addCriteria(Criteria.where("aa").is(aa));
        mongoTemplate.find(query,Object.class);
    <3>.Query query = new Query();
        query.addCriteria(Criteria.where("aa").is(aa)).addCriteria(Criteria.where("aa").is(aa));

        Update update = new Update();
        update.set("ins",dede);
        mongoTemplate.updateFirst(query,update,Object.class);
    3.分片瓦解项目中的知识点:
    <1>.websocket与https的区别:
        (1)http链接分为短连接和长连接，短连接是每次请求都要三次握手才能发送自己的信息，即每一个request对应一个response。长连接是在一定的期限内保持链接，保持TCPL链接不断开，
        客户端和服务端通信，必须要有客户端发起请求然后服务端返回结果，客户端是主动的，服务端是被动的。
        (2)websocket是为了解决客户端发起多个http请求到服务器资源浏览器必须要经过多长时间的轮训问题而生的，他经过多路复用，他是全双工通信，在websocket协议下服务端和客户端可以同时发送消息。
        建立了websocket之后的服务器不必再浏览器发送request请求后才能发送消息到浏览器，这时的服务器已有主动权什么时候发就可以发送消息到浏览器。而且信息当中不必在带有head的部分信息了与http
        的长连接通信来说，这种方式，不仅能降低服务器的压力，而且信息当中也减少了部分多余的信息。
    4.一会下班回去小区跑圈，做操去。

2019.10.24-26
    1.去丹棱总部去取社保卡。
    2.首次接触直播的推拉流业务，感到很新奇，挺感兴趣的。
    3.周五处理线上问题，某一单独账户的截屏和课件tab报错不显示的问题，参加需求三审，砍需求。
    4.开始整理shell,发现平时的业务中，清洗数据的业务很多，这时shell脚本就显得尤为的重要了。
    5.周六睡到中午，然后收拾了一下房子，下午开始刷leetcode，继续深入shell，晚上出去溜达了一圈，明天早起继续study。

2019.10.28(周一)
    1.合并bangzhu_2019_10_0.1分支到master主干上面，新建新的分支bangzhu_2019_10_0.2分支
    2.写周报，汇报上周的工作。
    3.深入需求，接着画脑图，尤其是历史的课次和优化轻选逻辑部分。
    4.下班后小区跑圈。

2019.10.29(周二)
    1.早上拉取该项目昨天的更新的部分，报错"Can't update:no tracked branch"错误，百度后，终端输入命令git branch --set-upstream-to origin/bangzhu_2019_10_0.2 bangzhu_2019_10_0.2后即可，
    可以将昨日更新后的文件pull下来。
    2.寻找点名截屏的数据库，进行数据的查找。项目中所有的截屏使用的是一个表，而不是每个需要截屏的功能去单独设置一个表，但是遇到了一个问题就是本次点名截屏需求需要和点名学生id去绑定，而之前使用的截屏
    的表中没有学生id的字段，贸然加上后就会使别的功能报错，研究后，将绑定的学生id，存放到list里面，将list转换成json字符串存到备注的字段里面，这样有一个不好的地方就是来回需要进行json的解析，多一步
    而已。
    3.之前接触的接触的判断语句多是在代码层次进行解决，由于需求的需要，转移部分判断语句在sql中进行判断，适应以下场景。

    TABLE:
    id      name       type(默认是-1)
    1       伍金凡1     s1
    2       李静文2     s2
    3       伍金凡2     s1
    4       李静文1     s2
    5       伍金凡3     s1
    1       李静文4     s3
    1       伍金凡2     s4
    1       李静文1     s3
    SELECT <include refid="wu_li_list"/> from TABLE_NAME
    WHERE name=#{name}
    <if test="type!=-1">
        and type=#{type}
    </if>

    4.首次接触Pair<Integer,Object>
        Pair<Integer,String> pair = new Pair<>(1,"one");
        Integer key = pair.getKey();
        String value = pair.getValue();
        System.out.println(key);
        System.out.println(value);
    5.TaskScheduler/ThreadPoolTaskExecutor

      TaskScheduler,spring3.0后自带了一个定时任务工具
          //定时任务,多长时间后指定该任务
          Future<?> future = taskScheduler.schedule(()->{

          },...);

          //比如当前一个任务结束的时刻，开始结算间隔时间，如0秒开始执行第一次任务，任务耗时5秒，任务间隔时间3秒，那么第二次任务执行的时间是在第8秒开始
          //下次执行时间 = 任务执行时间+延迟
          Future<?> future = taskScheduler.scheduleWithFixedDelay(new Runnable(){

          },...);

      ThreadPoolTaskExecutor,Spring线程池

          //开一个异步线程去执行
          threadPoolTaskExecutor.execute(new Runnable(){
              @Override
              public void run(){

              }
          });

    6.@Async注解，异步的。经典的例子:
        <1>
        package com.winter.service;
        import org.springframework.scheduling.annotation.Async;

        @Async
        public interface TestService {
            void test();
        }

        package com.winter.service.impl;
        import com.winter.service.TestService;
        import org.springframework.stereotype.Service;

        <2>
        @Service
        public class TestServiceImpl implements TestService {

            @Override
            public void test() {
                System.out.println("ThreadName:" + Thread.currentThread().getName());

                try{
                    Thread.sleep(1000);
                }catch (InterruptedException e){
                    e.printStackTrace();
                }
                System.out.println("测试Spring 异步调用");
            }
        }

        <3>
        package com.winter.controller;
        import com.winter.service.TestService;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.scheduling.annotation.EnableAsync;
        import org.springframework.web.bind.annotation.GetMapping;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.bind.annotation.RestController;

        @RestController
        @RequestMapping(value = "/test")
        @EnableAsync
        public class TestController {

            @Autowired
            private TestService testService;

            @GetMapping("/testAsync")
            public void print(){
                System.out.println("ThreadName:"+Thread.currentThread().getName());
                System.out.println("当前线程开始执行测试函数......");
                testService.test();

                for(int i=1;i<=100;i++){
                    System.out.print(i+" ");
                    if(i % 10 == 0){
                        System.out.println();
                        try{
                            Thread.sleep(1000);
                        }catch (InterruptedException e){
                            e.printStackTrace();
                        }
                    }
                }
                System.out.println("当前线程测试函数执行完毕......");
            }
        }

        输出结果为:
        hreadName:http-nio-8080-exec-2
        当前线程开始执行测试函数......

        1 2 3 4 5 6 7 8 9 10
        ThreadName:SimpleAsyncTaskExecutor-1
        11 12 13 14 15 16 17 18 19 20
        测试Spring 异步调用
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99 100
        当前线程测试函数执行完毕......

        如果去掉@EnableAsync注解，结果为:
        ThreadName:http-nio-8080-exec-2
        当前线程开始执行测试函数......
        ThreadName:http-nio-8080-exec-2
        测试Spring 异步调用
        1 2 3 4 5 6 7 8 9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99 100
        当前线程测试函数执行完毕......

    7.@Transactional注解:使用这个注解的类或者方法表示该类里面的所有方法或者这个方法的事务由Spring处理，来保证事务的原子性，即是方法里面对数据库操作，如果失败则Spring
      负责回滚，成功则执行提交操作。可以作用于接口，接口方法，类以及类方法上面。
      @Transactional注解应该只是被应用到public方法上，如果在private,protected或者默认可见性的方法上使用@Transactional注解，将被忽略，但是也不会抛出任何的异常。
      来自链接:https://www.cnblogs.com/zuoxh/p/9724193.html

    8.收敛SpringBoot测试环境:
      @SpringBootTest
      @RunWith(SpringJUnit4ClassRunner.class)
      public class Test{

          @Test
          public void test(){

          }
      }
    9.晚上在测试机上面进行演练，深入互动的流程细节。

2019.10.30(周三)
    1.开发github提交代码后在钉钉群里面进行报警提示，开发完毕后在咱们这个github里面进行测试,装配完成。
