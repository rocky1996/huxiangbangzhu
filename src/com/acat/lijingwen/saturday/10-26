*******************************************************************************
熟悉一些linux命令，做拓展，多看一些别人的面经，多做笔记，有的时候理解不了了，就硬背吧
*******************************************************************************
1.查看文件
find /-name filename.txt
2.查看一个程序是否运行
ps-ef|grep tomcat
3.终止线程
Kill -9 19979
终止线程号位19979的线程
4.查看文件  包含隐藏文件
ls-al
5.当前工作目录
Pwd
6.复制文件包括其子文件到自定目录
cp-r sourceFloder targetFloder
7.创建目录
mkdir newfloder
8.删除目录（此目录是空目录）
rmdir deleteEmptyFloder
9.除文件包括其子文件
rm -rf deleteFile
10.移动文件
mv  /temp/movefile/targetFloder
扩展重命名  mv oldNameFile newNameFile
11.切换用户
su -username
12.修改文件权限
Chmod 777 file.java
13.压缩文件
Tar -czf test.tar.gz /test1/test2
14.列出压缩文件列表
tar -tzf test.tar.gz
15.解压缩文件
tar -xvzf test.tar.gz
16.查看文件头10行
head -n 10 example.txt
17.查看文件尾10行
tail -n 10 example.txt
18.查看日志文件
tail-f example.log
//这个命令会自动显示新增内容屏幕只显示10行内容（可设置）
19.启动vi编辑器
Vi
20.查看系统当前时间
date
输出：周几 几月 几日 时间 和 时间显示格式 和年份
21.解zip文件(2019/4/4  新增命令)
unzip -op
22.查线程个数（方便查看程序是否有误）
ps-Lf端口号|wc -l
23.压缩文件夹为 tar.gz(比如tomcat)
tar-zcvf文件名.tar.gz ./
*******************************************************************************
线程池(使用场景，创造方式，从里面的参数入手)
*******************************************************************************
一个应用程序额的运行就可以被看作是一个进程   而线程是云心各种的实际的任务执行者，可以说进程中包含了多个可疑同时运行的线程

线程的生命周期：
新建线程对象   就绪状态    抢占CPU资源   运行（可能阻塞  然后会再次到达就绪状态）  run（）结束  stop（） 死亡 线程对象变成垃圾

并行和并发：
并发：并发，在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。
并行 这种只可以在多核CPU的基础下完成
线程池：
由于创建并销毁线程的过程会消耗内存 在java 中内存资源是及其宝贵的 所以我们就提出了线程池的概念。
线程池：java中开辟出了一种管理线程的概念 这个概念就叫做线程池，从概念以及应用场景中我们可以看出线程池的好处就是可以方便的管理县城  也可以减少内存的消耗。
创建线程池的类叫做 Executor  我们创建时  一般使用它的子类ThreadPoolExecutor
Public ThreadPoolExcutor(int corePoolSize,
Int maximumPoolSize,
Long keepAliveTime,
TimeUilt unit,	   //线程活动保持时间的单位
BlockingQueue<Runnable> workQueue，
ThreadFactory threadfactory,
RejectedExecutionHandler handler
)

handler的拒绝策略：
1.AbortPolicy:不执行新任务  直接抛出异常 提示线程池已满
2.DIsCardPolicy ：不执行新任务，也不抛出异常
3.DIsCardOldSetPolicy：将消息队列中的第一个任务替换为当前新进来的任务执行
4.CallerRunsPolicy：直接调用execute  来执行当前任务

四种常见的线程池
CachedThreadPool：可缓存的线程池  该线程池中没有核心线程  非核心线程的数量为Integer.max_value,就是无限大，当有需要时创建线程来执行任务 没有需要时回收线程，适用于耗时少任务量大的情况。
SecudleThreadPool：周期性执行任务的线程池  按照某种特定的计划执行线程中的任务，有核心线程但也有非核心线程，非核心线程的大小也为无限大。适用于执行周期性的任务。
SingleThreadPool ：只有一条线程来执行任务 适用于有顺序的任务的应用场景
FixedThreadPool：定长的线程池  有核心线程  核心线程的即为最大的线程数量没有非核心线程。适用于执行长期的任务  性能好很多