*******************************************************************************
零碎的知识(加分项)，Redis/Mongodb/es/kafka/hive/k8s，最起码弄懂redis/mongodb，(写demo，研究使用场景)，熟悉主从复制，分布式存储思想
*******************************************************************************
Redis 和MongoDB比较
实现语言：
指标	MongoDB	Redis	比较说明
实现语言	C++	C/C++
协议	BSON  自定义二进制	类Telnet
性能	依赖内存  TPS较高（每秒系统能够处理的交易或事物的数量）	依赖内存  TPS非常高
R》M
可操作性	丰富的数据表达。索引，最类似于关系数据库，支持丰富的查询语言	数据丰富  较少IO	M》R

内存及存储	适合大量数据存储，依赖系统虚拟内存管理，采用镜像文件存储；内存占有率比较高，官方建议独立部署在64位系统  （32位有最大2.5G文件限制）	Redis2.0后增加虚拟内存特性，突破物理内存限制；数据看可以设置时效性，类似于memcache	各有优势
可用性	支持master-slave,replicaset(内部采用paxos选举算法，自动故障恢复)auto  sharding  机制，对客户端屏蔽了故障转移和切分机制	依赖于客户端来实现分布式读写，主从复制时，每次从节点重新连接主节点都要依赖整个快照，无增量复制；不支持自动sharding，需要依赖程序设定一直hash机制	M》R;单点问题上，MongDB应用简单，相对用户透明，Redis比较复杂客户端主动解决（MongoDB 一般会使用replica sets和sharding功能结合，replica sets侧重高可用性及高可靠性，而sharding侧重于性能、易扩展）
可靠性	1.8以后采用binlog方式（Mysql同样采用该方式）支持持久化，增加可靠性	依赖快照进行持久化AOF增强可靠性，增强可靠性的同时  影响访问性能	M》R
一致性	不支持事务，靠客户端自身保证	支持事务 比较弱  仅能保证事务中的操作按顺序执行	M《R
数据分析	内置数据分析功能	不支持	M》R
应用场景	海量数据的访问效率提升	较小数据量的性能及运算	M》R

Not Only SQL
文档存储：Nosql:Mogodb
内存级的数据库
《redis实战》的内容学习  截图内容在文档里面
Redis：与其他数据库和软件的对比
高性能键值缓存服务器memcached也经常被拿来与Redis比较
两者性能差不多  但是redis能用两种不同的方式将数据写入硬盘  并且redis除了能存储普通字符串 还可以存储其他4种数据结构
memcached只能存储普通字符串。Redis既可以做主数据库使用也可以作为其他存储刺痛的辅助数据库。
分片是一种将数据划分为多个部分的方法，对数据的划分可以基于键包含的ID基于键
的散列值或者基于以上两者的某种组合

Redis是内存数据库  当服务器关闭时，服务器存储的数据将何去何从？
拥有两种不同形式的持久化方法，他们都可以用小而紧促的格式将存储在内存中的数据写入硬盘：第一种时间点转储，（在指定时间段内有之有指定数量的写操作执行）
  第二种将所有修改了数据库的命令都写入一个只追加文件里面，用户可以根据数据重要程度将只追加写入设置为从不同步  每秒同步一次或者每写入命令就同步一次。
主从复制：（可以扩展Redis的读性能，并为Redis提供故障转移支持）执行复制的从服务器或链接上主服务器，接收主服务器发送的整个初始副本；之后主服务器执行的写命令，都会被发送给所有连接着的从服务器去执行，从而实时地更新从服务器的数据集。
Redis中的列表：
Redis中的集合：set是无序唯一的
127.0.0.1:6379> sadd set-key item2
(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.
127.0.0.1:6379> config set stop-writes-on-bgsave-error no
OK
127.0.0.1:6379> sadd set-key item4
(integer) 1
127.0.0.1:6379>
Redis的散列：
Redis的散列可以存储多个键值对之间的映射
Redis的有序集合
有序集合和散列一样都用于存储键值对：有序集合的键被称为成员 每个成员都是各不相同，有序集合的值被称为分值   分值必须为浮点数
Redis五种数据类型的操作代码：
Microsoft Windows [版本 10.0.10240]
(c) 2015 Microsoft Corporation. All rights reserved.

C:\Users\Administrator>cd..

C:\Users>cd..

C:\>cd C:\Program files\redis

C:\Program Files\Redis>redis-cli.exe -h 127.0.0.1 -p 6379
127.0.0.1:6379> set mykey 123
OK
127.0.0.1:6379> get meykey
(nil)
127.0.0.1:6379> get mykey
"123"
127.0.0.1:6379>
127.0.0.1:6379> del mykey'
Invalid argument(s)
127.0.0.1:6379> del mykey
(integer) 1
127.0.0.1:6379> get mykey
(nil)
127.0.0.1:6379> rpush list-key item
(integer) 1
127.0.0.1:6379> rpush list-key item2
(integer) 2
127.0.0.1:6379> rpush list-key item
(integer) 3
127.0.0.1:6379> lrange list-key 0 -1
1) "item"
2) "item2"
3) "item"
127.0.0.1:6379> lindex list-key 1
"item2"
127.0.0.1:6379> lpop list-key
"item"
127.0.0.1:6379> lrange list-key 0 -1
1) "item2"
2) "item"
127.0.0.1:6379> sadd set-key item
(integer) 1
127.0.0.1:6379> sadd set-key item2
(integer) 1
127.0.0.1:6379> sadd set-key item3
(integer) 1
127.0.0.1:6379> sadd set-key item
(integer) 0
127.0.0.1:6379> smembers set-key
1) "item2"
2) "item3"
3) "item"
127.0.0.1:6379> sadd set-key item2
(integer) 0
127.0.0.1:6379> smembers set-key
1) "item2"
2) "item3"
3) "item"
127.0.0.1:6379> sadd set-key item4
(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.
127.0.0.1:6379> sadd set-key item2
(error) MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.
127.0.0.1:6379> config set stop-writes-on-bgsave-error no
OK
127.0.0.1:6379> sadd set-key item4
(integer) 1
127.0.0.1:6379> sismember set-key item2
(integer) 1
127.0.0.1:6379> srem set-key item2
(integer) 1
127.0.0.1:6379> smembers set-key
1) "item4"
2) "item3"
3) "item"
127.0.0.1:6379> hset hash-key sub-key1 value1
(integer) 1
127.0.0.1:6379> hset hash-key sub-key2 value2
(integer) 1
127.0.0.1:6379> hset hash-key sub-key3 value3
(integer) 1
127.0.0.1:6379> hset hash-key sub-key4 value3
(integer) 1
127.0.0.1:6379> hset hash-key sub-key4 value3
(integer) 0
127.0.0.1:6379> hgetall hash-key
1) "sub-key1"
2) "value1"
3) "sub-key2"
4) "value2"
5) "sub-key3"
6) "value3"
7) "sub-key4"
8) "value3"
127.0.0.1:6379> hdel hash-key sub-key2
(integer) 1
127.0.0.1:6379> hget hash-key sub-key3
"value3"
127.0.0.1:6379> zadd zset-key 728 member1
(integer) 1
127.0.0.1:6379> zadd zset-key 568 member2
(integer) 1
127.0.0.1:6379> zadd zset-key 985 member3
(integer) 1
127.0.0.1:6379> zrange zset-key 0 -1 withscores
1) "member2"
2) "568"
3) "member1"
4) "728"
5) "member3"
6) "985"
127.0.0.1:6379> zrangebyscore zset 0-800 withscores
(error) ERR min or max is not a float
127.0.0.1:6379> zrangebyscore zset 0 800 withscores
(empty list or set)
127.0.0.1:6379> zrangebyscore zset-key 0 800 withscores
1) "member2"
2) "568"
3) "member1"
4) "728"
127.0.0.1:6379> zrem zset-key member1
(integer) 1
127.0.0.1:6379> zrange zset-key 0 -1 withscores
1) "member2"
2) "568"
3) "member3"
4) "985"
127.0.0.1:6379>
主要练习了redis的五大数据结构基本操作set（集合） zset（有序集合）  S(字符串)  hash  list    再接再励
  set   mykey     123 （字符串）
  rpush list-key  item（list）
  sadd  set-key   item（set）
  hset  hash-key  sub-key1   value1（hash）
  zadd  zset-key   728       member1（zset）
中午午睡竟然从12点50-2：45  最近有点嗜睡 ，害怕  明天少睡会，然后留时间晚上看海贼啦啦啦啦啦啦啦啦
你好Redis！怎样展示如何使用Redis来构建一个简单的文化在那个投票网站的后端。
第二章：一个web服务器对请求进行响应的典型步骤如下：
1.服务器对客户端发来的请求进行解析
2.请求被转发给一个预定义的处理器
3.处理器可能会从数据库中取出数据
4.处理器根据取出的数据对模板进行渲染
5.处理器向客户端返回渲染后的内容作为对请求的响应
登录和Cookie缓存
对于用来登陆的cookie 有两种常见的方法可以将登陆信息存储在cookie里面。一种是签名（singned）cookie，另一种是令牌（token）cookie
签名cookie通常会存储用户名，可能还有用户ID用户最后一次成功登录的时间，以及网站觉得有用的其他任何信息。
令牌cookie会在cookie里面存储一串随即字节作为令牌，服务器可以根据令牌在数据库中查找令牌的拥有者。随着时间的推移，旧令牌会被新令牌取代。

Cookie类型	优点	                                                                                          缺点
签名cookie	验证cookie所需的一切信息都存储在cookie里面。Cookie可以包含额外的信息，并且对这些信息进行签名也很容易	正确地处理签名很难  很容易忘记对数据进行签名，或者忘记验证数据的签名，从而造成安全漏洞
令牌cookie	添加信息非常容易，cookie的体积非常小，因此移动终端和速度较慢的客户端可以更快地发送请求	                需要在服务器中存储更多信息，如果使用的是关系数据库  那么载入和存储cookie的代价可能会很高



菜鸟教程：发现使用《redis实战》这本书进行不下去  所以使用菜鸟教程吧

再说说前面学到的五大数据类型：
String   hash  list  set  zset

String是redis是最基本的类型    可理解为Memcached一模一样的类型一个key对应一个value。
String类型的值最大能存储512MB
实例：set  string  “xaioyang”

Hash  是一个键值（key=>value）对集合
每个hash可以存储2^32  -1

实例：HMSET,HGET    HMSET 设置了两个 field=>value 对, HGET 获取对应 field 对应的 value
HMSET hashkey  field1 “sds” field2 ”world”
HGET  hashkey  field1
“sds”


LIST是简单的字符串列表  按照插入顺序排序  你可以添加一个元素到列表的头部或者尾部，可以存储2^32  -1 元素（4294967295，每个列表可存储40多亿）
lRange（0，-1）表示开始到结尾
实例：

Set（集合）
集合是通过哈希表实现的，所以添加删除查找的复杂度都是O（1）
集合内元素的唯一性  第二次插入的元素将被忽略
集合中最大阿德成员数为2^32   -1
Zset(有序集合)
添加元素到集合，元素在集合中存在则更新对应score
Redis发布订阅：
Redis发布订阅是一种消息通信模式：发送者发送信息订阅者接收信息
Redis客户端可以订阅任意数量的频道

Redis事务：可以一次执行多个命令，并且带有一下三个重要的保证。
批量操作在发送EXEC命令前被放入队列缓存
收到EXEC命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行
在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中
一个事务从开始到执行会经历以下三个阶段：
    开始事务。命令入队。执行事务。
    以下是一个事务的例子，它先以MULTI开始一个事务，然后将多个命令入队到事务中

事务命令：discard  取消事务，放弃执行事务块内的所有命令
Exec 执行所有事务块内的命令
Multi标记一个事务块的开始
UNwatch  取消watch命令对所有key的监视
Watch key[key ...]
监视一个或多个key  如果在食物执行之前这个或这些key被其他命令所改动，那么事务将被打断。
Redis脚本  使用Lua解释器来执行脚本执行脚本的常用命令为EVAL
Eval命令的基本语法如下：
EVAL  script  numkeys  key[key...]arg[arg...]
执行Lua脚本
EVAL SHA sha1 numkeys key[key..]arg[arg..]
执行Lua脚本
SCRIPT  EXISTS  script[script...]
查看指定的脚本是否已经被保存在缓存当中
SCRIPT flush
从脚本缓存中移除所以脚本
Script kill
杀死当前正在运行的lua脚本
Script Load script
将脚本script添加到脚本缓存中，但并不立即执行这个脚本
Redis链接命令
AUTH password  验证密码是否正确
ECHO message  打印字符串
PING  查看服务是否运行
QUIT 关闭当前连接
SELECT index 切换到指定的数据库


Redis 服务器：
BGREWRITEAOF
异步执行一个AOF文件重写操作
BGSAVE
在后台异步保存当前数据库的数据到磁盘
CLIENT KILL[ip:port][ID client-id]
关闭客户端连接
CLIENT GETNAME
获取连接的名称
CLIENT PAUSE timeout
在制定时间内种植运行来自客户端的命令
CLIENT SETNAME connection-name
设置当前连接的名称
CLUSTER  SLOTS
获取集群节点的映射数组
COMMAND COUNT
获取Redis 命令总数
COMMAND GETKEYS
获取给定命令的所有键
TIME 返回当前服务器时间
。。。。
数据备份与恢复
SAVE命令用于创建当前数据库的备份
恢复数据如果需要恢复数据，只需将备份文件移动到redis安装目录并启动服务即可。获取redis目录可以使用config命令，

BGsave创建redis备份文件也可以使用命令BGSAVE，该命令在后台执行

客户端命令
Client list 返回连接到redis服务的客户端列表
Client setname 设置当前连接的名称
Client getname 获取通过client setname命令设置的服务名称
Client PAUSE 挂起客户端链接 指定挂起的时间以毫秒计
Client kill  关闭客户端连接

Redis管道技术;
Redis是一种基于客户端-服务器模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求遵循以下步骤：
客户端向服务端发送一个查询请求，并监听Socket返回  通常是以阻塞模式，等待服务端响应。
服务端处理命令，并将结果返回给客户端。

查看redis管道，只需要启动redis实例并输入以下命令
管道技术的优势：
管道技术最显著的优势是提高了redis服务的性能
Redis分区
分区是分割数据到多个redis实例的处理过程，因此每个实例只保存key的一个子集
分区的优势：通过利用多台计算机内存的和值，允许我们构造更大数据库
通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器允许我们扩展网络网络带宽。
分区的不足：
redis的一些特性在分区方面表现的不是很好：
涉及多个key的操作通常是不被支持的。举例来说 放两个set映射到不同的redis实例上时，你就不能对这两个sey之心高教机操作
涉及多个key的 redis操作通常是不被支持的。
涉及多个key的redis事务不能使用
当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件
增加或删除容量也比较复杂
分区类型有范围分区：按范围分区，就是映射一定范围的对象到特定的redis实例
哈希分区：这对任何key都适用，也无需要时object_name
