***********************************************
java IO
***********************************************
1.讲讲 IO 里面的常见类，字节流、字符流、接口、实现类、方法阻塞。
(1)文件流  fileInputStream/fileoutputstream(操作的是字节流)  fileReader/fileWriter（操作的是字符流）都会直接操作文件流 直接与os底层交互  亦被称节点流。在使用这几个刘的对象之后需要关闭流对象，因为java垃圾回收不会主动回收java7后在try{}打开流最后程序会自动关闭流对象。
(2)包装流:printStream/printwriter/scanner
Printstream 可以封装直接与文件交互的姐电流对象outputstream,使得编程人员可以忽略设备底层的差异，进行一直的IO操作。因此这种流也称为处理流或者包装流。
Printwriter除了可以包装字节流outputstream之外还能包装字符流writer
scanner可以包装键盘输入，方便将键盘输入的内容转换成我们想要的数据类型
(3)字符串流stringreader  stringwriter
这两个操作的是专门操作string字符串的流，其中stringReader能从string中方便的读取数据并保存到char数组，而stringwriter则将字符串类型的数据写入到stringbuffer中  （因为string不可写）
(4)转换流：InputstreamReader/outputStreamReader
这两个类可以将字节流转换成字符流，在读取键盘输入（system.In）和我那个或网络通信的时候需要使用这两个类
(5)缓冲流：bufferreader/bufferwriter   bufferInputstream/bufferoutputstream
没有经过buffered处理的IO，意味着每一次读和写的请求都会由OS底层直接处理，这会导致非常低效的问题。
经过buffered处理过的输入流将会从一个buffer内存区域读取数据，本地API只会在buffer空了之后才会被调用。
Bufferedreader/bufferedwriter可以将字节流reader包装成缓冲流  这是最常见用的做法。
Bufferreader提供一个readline（）可以方便地读取一行，而fileinputstream和filereader只能读取一个字节或者一个字符    因而bufferedreader被成为行读取器。
应用场景：fileinputstream/fileoutputstream需要逐个字节处理原始二进制的时候哦使用效率低
Filereader/filewriter需要逐个处理字符时
Stringreader/stringwriter需要处理字符串的时候，可以将字符串保存为字符数组
Printstream/printwriter用来包装fileoutputstream对象方便自己接将string字符串写入文件
Scanner 用来包装System.in流方便的将输入的string字符串转换成需要的数据类型
InputStreamReader/outputStreamReader  自结合字符转换  网络通信或处理键盘输入
BufferedReader/bufferwriter bufferinputstream/bufferedoutputstream 缓冲流用来包装字节流或者字符流提升IO性能，bufferedReader 还可以方便地读取一行，简化编号
2.讲讲 NIO。
先说说BIO：银行职员处理每次来一个请求  就分配到线程池中由一个线程职员处理，如果超出了线程池的最大上限就会扔到队列等待。
NIO：思想： 分而治之，将事件的流程拆分为几大任务，专门的人负责专门的任务
MainReactor线程 subReactor线程 work线程
mainReactor线程负责监听server socket，accept新连接，并将建立的socket分派给subReactor；subReactor可以是一个线程，也可以是线程池（一般可以设置为CPU核数），负责多路分离已连接的socket，读写网络数据，这里的读写网络数据可类比顾客填表这一耗时动作，对具体的业务处理功能，其扔给worker线程池完成。
不同的线程干专业的事情 最终每个线程都没空着 系统吞吐量就上去了

NIO+异步的方式能让少量的线程（资源）做大量的事情，这适用于很多应用场景，比如代理服务、api服务、长连接服务等等，这些应用如果用同步方式将耗费大量机器资源。尽管NIO+异步能提高系统吞吐量，但其并不能让一个请求的等待时间下降，相反可能会增加等待时间。
3.String 编码 UTF-8 和 GBK 的区别?
utf-8是一种国际化标准的文字编码   windows将utf-8转Unicode   GBK存在是为中国而创造
GBK的文字编码是双字节来表示的  即不论中英字符均使用双字节来表示 只不过为区别中文将其最高位设定为1
UTF-8对于中文使用24位三字节   英文使用8位一个字节
GBK包含全部中文字符
UTF-8则包含全世界所有国家需要用到的字符
GBK格式的文档在国外打开会乱码
utf-8格式的文档在国外打开不会乱码
GBK编码方式的编码是以中国国情而创造的，在国际上的兼容性不好，这也是为什么大多数的网页是使用UTF-8编码而不是GBK。
4.什么时候使用字节流、什么时候使用字符流?
InputStream 和OutputStream,两个是为字节流设计的,主要用来处理字节或二进制对象,
Reader和 Writer.两个是为字符流（一个字符占两个字节）设计的,主要用来处理字符或字符串.
5.递归读取文件夹下的文件，代码怎么实现
思想：使用到了listfile（）这个函数返回一个文件路径数组
创建文件数组 然后判断取到的文件是不是为空
非空如果是文件直接输出文件名   使用文件对象调用getName（）方法
或者是文件目录则调用自身递归得出文件




***********************************************
网络通信
***********************************************
1.http 是无状态通信，http 的请求方式有哪些，可以自己定义新的请求方式么。
http请求常用的有post get head
HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。
HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。
（1）Get请求返回以URL形式表示的资源，当用户输入一个简单的URL时，就是使用GET请求，（query String格式：     http://ip:port?name=zhangsan&pwd=123456说白了就是键值对）
Get请求可以发送query string代表URL编码字符串的实际意义
（2）post请求则将表单置入web服务器中，发送消息到公告板，新闻组，邮件列表或者其他机构中。或者为数据处理机制提供诸如提交表单后的结果等数据。Post请求由web服务器决定，依赖于URL所指向的应用程序
Get post的区别：他俩底层都市TCP  get产生一个TCP数据包  post产生两个TCP数据包
对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；
而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。
get不可以代替post
 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。但不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。
/*
GET在浏览器回退时是无害的，而POST会再次提交请求。
GET产生的URL地址可以被Bookmark，而POST不可以。
GET请求会被浏览器主动cache，而POST不会，除非手动设置。
GET请求只能进行url编码，而POST支持多种编码方式。
GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。
GET请求在URL中传送的参数是有长度限制的，而POST么有。
对参数的数据类型，GET只接受ASCII字符，而POST没有限制。
GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。
GET参数通过URL传递，POST放在Request body中。
*/
GET： 请求指定的页面信息，并返回实体主体。
HEAD： 只请求页面的首部。
POST： 请求服务器接受所指定的文档作为对所标识的URI的新的从属实体。
PUT： 从客户端向服务器传送的数据取代指定的文档的内容。
DELETE： 请求服务器删除指定的页面。
OPTIONS： 允许客户端查看服务器的性能。
TRACE： 请求服务器在响应中的实体主体部分返回所得到的内容。
PATCH： 实体中包含一个表，表中说明与该URI所表示的原内容的区别。
MOVE： 请求服务器将指定的页面移至另一个网络地址。
COPY： 请求服务器将指定的页面拷贝至另一个网络地址。
LINK： 请求服务器建立链接关系。
UNLINK： 断开链接关系。
WRAPPED： 允许客户端发送经过封装的请求。
Extension-mothed：在不改动协议的前提下，可增加另外的方法。
/*
**第一次写的
2.socket 通信，以及长连接，分包，连接异常断开的处理。

从图中可以知道socket是应用与TCP/IP协议族通信的中间软件抽象层，将复杂的TCP/ip协议隐藏在socket接口后面，对用户来说一组简单的接口就是全部，
让socket去组织数据以符合指定的协议
Socket保证了不同计算机之间的通信也就是网络通信，
3.socket 通信模型的使用，AIO 和 NIO。
BIO  AIO  NIO
Bio一个链接一个线程
*/

//第二次写
二.socket 通信，以及长连接，分包，连接异常断开的处理。

在本地可以通过进程PID（port ID端口号）来唯一标识一个进程，但在网络中是行不通的。
TCP/IP协议族网络层的IP地址可以唯一标识网络中的主机，传输层的协议+端口可以唯一标识主机中的应用进程。几乎所有的应用程序都是采用socket
什么事socket？
Socket源于Unix  socket是一种特殊的文件一些socket函数对其进行读写 打开 关闭
Socket的函数有：
Int socket(int domain,int type,int protocol)
Domain:是协议域  又称协议族
Type：指定socket
Protocol：指定协议
Int bind(int sockfd,const struct sockaddr *addr,socklen_t addrlen);
Sockfd:socket描述字
Addr：指向要绑定给sockfd的协议地址
Addrlen：对应的是地址长度

Socket网络通信：
socket中TCP的三次握手建立连接详解：
Tcp建立连接要进行三次握手：
客户端向服务器发送一个SYN J
服务端向客户端响应一个SYN K 并对SYN 进行确认ACK J+1客户端再向服务器发送一个确认ACK+1
三次握手：
图解在文档里面 放不到此处；
四次握手:
图解在文档里面 放不到此处；其他同理
1.某个应用进程首先调用close主动关闭连接   这是TCP发送一个FIN M
2.另一端接收到FIN M之后，执行被动关闭，对这个FIN 进行确认。它的接收也作为文件结束符给应用进程，因为FIN的接受意味着应用进程在相应的连接上再也接收不到额外数据。
3.一段时间之后接收到文件结束符的应用进程调用close关闭它的socket  这导致她的TCP  也发送一个FIn N；
4.接收到FIN的源发送端TCP对它进行确认。


从图中可以知道socket是应用与TCP/IP协议族通信的中间软件抽象层，将复杂的TCP/ip协议隐藏在socket接口后面，对用户来说一组简单的接口就是全部，让socket去组织数据以符合指定的协议
Socket保证了不同计算机之间的通信也就是网络通信，‘
长连接：
建立连接->传输数据->保持连接->传输数据。。。。。直到一方关闭连接，多是客户端关闭连接。
优势：多次通信中可以省去连接建立和关闭链接的开销，从总体上看  进行多次数据传输总耗时会更少。
缺点  为了一直保持这个连接（因为网络抖动，服务器故障）
a利用TCP自身的保活机制来实现，保活机制会定时发送探测保温来识别对方是否可达
b上层应用主动的定时发送一个小数据包 作为“心跳”探测是否能到达另一端。保活功能大多数情况下用于服务器探测客户端的场景，一旦识别客户端不可达，则断开连接，缓解服务器压力
分包，分包是指出现粘包的时候我们的接收方要进行分包处理。
半包：指接受方没有接受到一个完整的包，只接受了部分，这种情况主要是由于TCP为提高传输效率，将一个包分配的足够大，导致接受方并不能一次接受完。（在长连接和短连接中都会出现）。 
粘包：指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。
粘包原因：发送方是因为TCP为了提高传输效率，发送方往往要收集到走够多的数据后才发送。这是因为接收方先把收到的数据放在系统接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。
粘包情况有两种，一种是粘在一起的包都是完整的数据包，另一种情况是粘在一起的包有不完整的包 
连接异常断开的处理
TCP连接异常
1.程序/进程异常  TCPLink异常而application1正常 TCPLink会被关掉并且告诉application2.
2.物理链路异常
如果出现Machine1或者Machine2任何一个系统死机：假设Machine1系统异常,此时Machine2无法知道此TCP连接的失效，并一直认为连接正常。如果网络硬件故障（如网线拔掉、交换机断电）：Machine1与Machine2都无法知道此TCP连接的失效，并一直认为连接正常。
异常断开情况影响分析：
对于程序/进程异常，由于Socket调用中可以得到返回值。因此在做程序开发的时候比较容易处理。
对于物理链路异常，如果Machine1系统异常，如果Application2是FTP之类的服务器程序倒也无妨（一个连接存在时间比较长对它没有多大影响），如果是需要实时知道连接用户状态的即时通讯类服务器或者Application2是客户端则就会产生一系列的问题了。如果Machine1与Machine2都异常，Application1和Application2都会一直等下去，两端需要进行相似的处理。
异常断开情况的判断与处理：
1.定时发送简单的约定帧
2.Ping +send/receive
3.KeepAlive-Timer
三.socket 通信。模型的使用，AIO 和 NIO。
BIO  AIO  NIO

BIO：同步并阻塞，服务器实现模式为一个链接一个县城，即客户端有连接请求时服务器端就需启动一个线程进行处理，如果这个链接不做任何事情就会造成不必要的线程开销，可以经过线程池改进，适合于连接数目小且固定
NIO：同步非阻塞，一个请求一个线程，客户端的连接请求都会注册到多路复用器上，多路复用器轮询到链接有IO请求时才启动一个线程进行处理。
适用于连接数目多  连接比较短的架构  比聊天服务器
AIO：连接数目多且比较长架构，比如相册服务器，充分调用OS参与并发操作，JDK1.7开始支持。
四. socket 框架 netty 的使用，以及 NIO 的实现原理，为什么是异步非阻塞。
socket 框架 netty 的使用：
NIO的实现原理：
为什么是异步非阻塞:
4. socket 框架 netty 的使用，以及 NIO 的实现原理，为什么是异步非阻塞。
5. 同步和异步，阻塞和非阻塞。
6. OSI 七层模型，包括 TCP,IP 的一些基本知识
物数网运会表应

TCP/ip即传输控制协议/网间协议 是一个工业标准的协议集，它是为广域网设计的
6.http 中，get post 的区别
Get post的区别：他俩底层都市TCP  get产生一个TCP数据包  post产生两个TCP数据包
对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；
而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。
get不可以代替post
 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。但不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。
/*
GET在浏览器回退时是无害的，而POST会再次提交请求。
GET产生的URL地址可以被Bookmark，而POST不可以。
GET请求会被浏览器主动cache，而POST不会，除非手动设置。
GET请求只能进行url编码，而POST支持多种编码方式。
GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。
GET请求在URL中传送的参数是有长度限制的，而POST么有。
对参数的数据类型，GET只接受ASCII字符，而POST没有限制。
GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。
GET参数通过URL传递，POST放在Request body中。
*/
GET： 请求指定的页面信息，并返回实体主体。
HEAD： 只请求页面的首部。
POST： 请求服务器接受所指定的文档作为对所标识的URI的新的从属实体。
8. 说说 http,tcp,udp 之间关系和区别。

UDP：是与TCP相对应的协议 用户数据报协议  属于TCP/IP协议中de一种
9. 说说浏览器访问http://www.taobao.com，经历了怎样的过程。
10. HTTP 协议、 HTTPS 协议，SSL 协议及完整交互过程；
11. tcp 的拥塞，快回传，ip 的报文丢弃
12. https 处理的一个过程，对称加密和非对称加密
13. head 各个特点和区别
树(前序后序中序遍历)，平衡二叉树，二叉查找树，并做拓展，B/B+树，红黑树
树的先序遍历：根左右
树的中序遍历：左根右
树的后序遍历：左右根
代码见class